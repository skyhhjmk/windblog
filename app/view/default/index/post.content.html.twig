<title>{{ page_title|default('风屿雨博客') }}</title>
<div id="pjax-container">
<div class="max-w-full mx-auto">
<!-- PJAX 隐藏侧栏片段：完成后注入到布局右侧栏 -->
<div id="pjax-sidebar-html" style="display:none">
    {% if sidebar is defined and sidebar.widgets is defined %}
        {% for widget in sidebar.widgets %}
            {% if widget.enabled and widget.html is defined %}
                <div class="sidebar-widget" data-widget-key="{{ widget.key ?? widget.id ?? widget.slug ?? widget.name ?? loop.index }}" data-widget-type="{{ widget.type ?? '' }}">
                    {{ widget.html|raw }}
                </div>
            {% endif %}
        {% endfor %}
    {% endif %}
</div>
    <article class="bg-white rounded-xl shadow-md overflow-hidden no-animation">
        <!-- 文章头部 -->
        <div class="p-6 border-b border-gray-100">
            <h1 class="text-3xl font-bold text-gray-800 mb-4">{{ post.title }}</h1>
            <div class="flex items-center text-gray-500 text-sm space-x-4">
                <span class="flex items-center">
                    <i class="far fa-calendar-alt mr-1"></i>
                    {{ post.created_at|date('Y-m-d') }}
                </span>
                <span class="flex items-center">
                    <i class="far fa-user mr-1"></i>
                    <span class="font-medium text-blue-600 hover:text-blue-800 transition-colors cursor-pointer" title="查看作者详情">
                        {{ author }}
                    </span>
                </span>
                {% if post.primaryAuthor.first().avatar %}
                <span class="flex items-center">
                    <img src="{{ post.primaryAuthor.first().avatar }}" alt="{{ author }}" class="w-6 h-6 rounded-full mr-1 object-cover" loading="lazy" decoding="async" fetchpriority="low">
                </span>
                {% endif %}
            </div>
            <div class="mt-3 text-sm text-gray-600 space-x-2 flex flex-wrap px-6">
                {% if post.categories|length > 0 %}
                    <span class="text-gray-500">分类：</span>
                    {% for c in post.categories %}
                        <a href="/category/{{ c.slug }}.html" class="inline-flex items-center px-2 py-1 bg-blue-50 text-blue-700 rounded hover:bg-blue-100 mr-2">#{{ c.name }}</a>
                    {% endfor %}
                {% endif %}
                {% if post.tags|length > 0 %}
                    <span class="text-gray-500 ml-3">标签：</span>
                    {% for t in post.tags %}
                        <a href="/tag/{{ t.slug }}.html" class="inline-flex items-center px-2 py-1 bg-purple-50 text-purple-700 rounded hover:bg-purple-100 mr-2">#{{ t.name }}</a>
                    {% endfor %}
                {% endif %}
            </div>
        </div>

        <!-- 文章内容 -->
        <div class="p-6">
            <div class="prose max-w-none fade-in-on-scroll no-animation" 
                 id="post-container" 
                 data-post-id="{{ post.id }}" 
                 data-post-slug="{{ post.slug }}" 
                 data-csrf-token="{{ csrf_token() }}">
                <div class="animate-pulse space-y-3">
                    <div class="h-6 bg-blue-100 rounded w-2/3"></div>
                    <div class="h-4 bg-blue-100 rounded w-full"></div>
                    <div class="h-4 bg-blue-100 rounded w-5/6"></div>
                    <div class="h-4 bg-blue-100 rounded w-3/4"></div>
                </div>
            </div>
        </div>

        <!-- 文章底部 -->
        <div class="p-6 border-t border-gray-100">
            <div class="flex justify-between items-center">
                <a href="/"
                   class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium">
                    <i class="fas fa-arrow-left mr-1"></i>
                    返回首页
                </a>
                <div class="text-sm text-gray-500">
                    <i class="far fa-clock mr-1"></i>
                    最后更新: {{ post.updated_at|date('Y-m-d') }}
                </div>
            </div>
        </div>
    </article>

    <!-- 评论区域 -->
    <div class="mt-8 bg-white rounded-xl shadow-md p-6" id="comments-section">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">评论</h2>
        
        <!-- 评论列表 -->
        <div id="comments-list" class="mb-8">
            <!-- 评论将通过JavaScript动态加载 -->
        </div>

        {% if post.allow_comments %}
        <!-- 评论表单 -->
        <div class="border-t border-gray-200 pt-6">
            <h3 class="text-lg font-medium text-gray-800 mb-4">发表评论</h3>
            <form id="comment-form" class="space-y-4">
                <input type="hidden" id="post-id" name="post_id" value="{{ post.id }}">
                <input type="hidden" id="parent-id" name="parent_id" value="0">
                <input type="hidden" id="quoted-text" name="quoted_text" value="">
                <input type="hidden" id="quoted-comment-id" name="quoted_comment_id" value="0">

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="guest_name" class="block text-sm font-medium text-gray-700 mb-1">姓名 *</label>
                        <input type="text" id="guest_name" name="guest_name" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="guest_email" class="block text-sm font-medium text-gray-700 mb-1">邮箱 *</label>
                        <input type="email" id="guest_email" name="guest_email" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                </div>

                <div>
                    <label for="content" class="block text-sm font-medium text-gray-700 mb-1">评论内容 *</label>
                    <textarea id="content" name="content" rows="4" required
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                    <div id="selected-text-quote" class="mt-2 p-2 bg-gray-100 border-l-4 border-blue-500 text-sm text-gray-600 hidden">
                        <span class="font-medium">引用:</span>
                        <span id="selected-text-content"></span>
                        <button type="button" id="remove-quote" class="ml-2 text-red-500 hover:text-red-700">&times;</button>
                    </div>
                </div>

                <div>
                    <button type="submit"
                            class="px-6 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                        提交评论
                    </button>
                </div>
            </form>
        </div>
        {% else %}
        <!-- 关闭评论提示 -->
        <div class="border-t border-gray-200 pt-6">
            <p class="text-gray-500 text-center py-4">该文章已关闭评论功能</p>
        </div>
        {% endif %}
    </div>
</div>

<div id="selection-tooltip" class="fixed bg-gray-800 text-white px-3 py-2 rounded text-sm hidden z-50">
    <button id="quote-selection-btn" class="hover:text-blue-300">引用选中内容评论</button>
</div>
<script data-pjax-eval="true">
    // 内容缓存（避免重复请求）
    window.__postContentCache = window.__postContentCache || {};
    // 加载状态标记（防止重复请求）
    window.__postLoadingState = window.__postLoadingState || {};

    function renderPost() {
        const container = document.getElementById('post-container');
        if (!container) {
            console.warn('[Post.content] 容器不存在');
            return;
        }

        const postId = container.dataset.postId;
        const postSlug = container.dataset.postSlug;
        const csrfToken = container.dataset.csrfToken;

        if (!postSlug) {
            console.error('[Post.content] 缺少文章标识');
            return;
        }

        // 检查是否正在加载
        if (window.__postLoadingState[postSlug]) {
            console.log('[Post.content] 文章正在加载中，跳过重复请求:', postSlug);
            return;
        }

        console.log('[Post.content] 开始加载文章:', postSlug);

        // 检查缓存
        const cacheKey = 'post_' + postSlug;
        if (window.__postContentCache[cacheKey]) {
            console.log('[Post.content] 使用缓存内容');
            renderContent(container, window.__postContentCache[cacheKey]);
            return;
        }

        // 标记为正在加载
        window.__postLoadingState[postSlug] = true;

        // 通过 API 获取内容
        fetch('/api/v1/post/content/' + postSlug, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-TOKEN': csrfToken,
                'Accept': 'application/json'
            },
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('HTTP ' + response.status);
            }
            return response.json();
        })
        .then(data => {
            if (data.code === 200 && data.data && data.data.content) {
                // 缓存内容
                window.__postContentCache[cacheKey] = data.data.content;
                renderContent(container, data.data.content);
            } else {
                throw new Error(data.message || '加载失败');
            }
        })
        .catch(error => {
            console.error('[Post.content] 加载失败:', error);
            container.innerHTML = '<div class="text-red-500 p-4 border border-red-300 rounded">' +
                '⚠️ 文章内容加载失败：' + error.message + '<br>' +
                '<button onclick="location.reload()" class="mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">刷新页面</button>' +
                '</div>';
        })
        .finally(() => {
            // 清除加载状态
            delete window.__postLoadingState[postSlug];
        });
    }

    function renderContent(container, content) {
        function doPreview() {
            if (!window.Vditor) {
                window.__rpTry = (window.__rpTry || 0) + 1;
                console.log('[Post.content] 等待 Vditor 加载中... (第' + window.__rpTry + '次尝试)');
                if (window.__rpTry < 200) {
                    setTimeout(doPreview, 100);
                } else {
                    container.innerHTML = '<div class="text-red-500 p-4 border border-red-300 rounded">' +
                        '⚠️ Vditor 加载超时<br>' +
                        '<button onclick="location.reload()" class="mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">刷新页面</button>' +
                        '</div>';
                }
                return;
            }

            console.log('[Post.content] Vditor 已加载，开始渲染内容');
            Vditor.preview(container, content, {
                mode: 'light',
                lang: 'zh_CN',
                anchor: 1,
                lazyLoadImage: 'https://cdn.jsdelivr.net/npm/vditor/dist/images/img-loading.svg',
                after() {
                    console.log('[Post.content] 渲染完成');
                    // 文章渲染完成
                    if (window.PjaxProgress && typeof window.PjaxProgress.complete === 'function') {
                        window.PjaxProgress.complete();
                    }
                    // 初始化评论功能
                    if (typeof initComments === 'function') {
                        initComments();
                    }
                    // 初始化划词评论功能
                    if (typeof initTextSelection === 'function') {
                        initTextSelection();
                    }
                }
            });
        }

        // 使用 rAF + setTimeout 让页面先渲染
        if (window.requestAnimationFrame) {
            requestAnimationFrame(function () { setTimeout(doPreview, 0); });
        } else {
            setTimeout(doPreview, 0);
        }
    }

    // 监听 page:ready 和 DOMContentLoaded 事件
    document.addEventListener('DOMContentLoaded', function() {
        // 检查是否在文章页
        if (!document.getElementById('post-container')) {
            return;
        }
        console.log('[Post.content] DOMContentLoaded 触发');
        window.__rpTry = 0;
        renderPost();
    });
    
    document.addEventListener('page:ready', function() {
        // 检查是否在文章页
        if (!document.getElementById('post-container')) {
            return;
        }
        console.log('[Post.content] page:ready 触发');
        window.__rpTry = 0;
        renderPost();
    });
    
    // 立即执行一次（用于 PJAX 加载）
    (function () {
        // 检查是否在文章页
        if (!document.getElementById('post-container')) {
            return;
        }
        
        console.log('[Post.content] 脚本开始执行');
        
        function injectSidebar() {
            var t = document.getElementById('pjax-sidebar-html');
            var c = document.getElementById('sidebar-container');
            if (!t || !c) return;
            if (window.PJAX || window.jQuery) {
                try { document.dispatchEvent(new CustomEvent('pjax:sidebarReady')); } catch (_) {}
            } else {
                c.innerHTML = t.innerHTML || '';
            }
        }
        
        window.__rpTry = 0;
        injectSidebar();
        renderPost();
    })();

    // 初始化评论功能
    function initComments() {
        const postId = {{ post.id }};
        const allowComments = {{ post.allow_comments|default(true) ? 'true' : 'false' }};
        
        // 始终加载已有评论（无论是否允许评论）
        loadComments(postId);

        // 如果不允许评论，不初始化表单事件
        if (!allowComments) {
            console.log('[Post.content] 评论功能已关闭，仅显示已有评论');
            return;
        }

        // 提交评论表单
        const commentForm = document.getElementById('comment-form');
        if (commentForm) {
            commentForm.addEventListener('submit', function(e) {
                e.preventDefault();
                submitComment(postId);
            });

            // 移除回车提交功能，使回车正常换行
            const contentTextarea = document.getElementById('content');
            if (contentTextarea) {
                contentTextarea.addEventListener('keydown', function(e) {
                    // 不做任何阻止，让回车正常换行
                });
            }
        }

        // 移除引用按钮
        const removeQuoteBtn = document.getElementById('remove-quote');
        if (removeQuoteBtn) {
            removeQuoteBtn.addEventListener('click', function() {
                const selectedTextQuote = document.getElementById('selected-text-quote');
                const parentId = document.getElementById('parent-id');
                const quotedText = document.getElementById('quoted-text');
                const quotedCommentId = document.getElementById('quoted-comment-id');
                
                if (selectedTextQuote) selectedTextQuote.classList.add('hidden');
                if (parentId) parentId.value = '0';
                if (quotedText) quotedText.value = '';
                if (quotedCommentId) quotedCommentId.value = '0';
            });
        }
    }

    // 加载评论
    function loadComments(postId) {
        const commentsList = document.getElementById('comments-list');
        if (!commentsList) {
            console.warn('[Post.content] 评论列表容器不存在');
            return;
        }

        fetch('/comment/list/' + postId)
            .then(response => response.json())
            .then(data => {
                if (data.code === 0) {
                    renderComments(commentsList, data.data);
                } else {
                    commentsList.innerHTML = '<p class="text-gray-500">加载评论失败</p>';
                }
            })
            .catch(error => {
                console.error('[Post.content] 评论加载失败:', error);
                if (commentsList) {
                    commentsList.innerHTML = '<p class="text-gray-500">加载评论失败</p>';
                }
            });
    }

    // 渲染评论
    function renderComments(container, comments) {
        if (!container) {
            console.warn('[Post.content] 评论容器不存在');
            return;
        }

        // Handle nested structure where comments is an object with a comments field
        const commentsList = Array.isArray(comments) ? comments : (comments.comments || []);

        if (!commentsList || commentsList.length === 0) {
            container.innerHTML = '<p class="text-gray-500">暂无评论</p>';
            return;
        }

        let commentsHtml = '';
        commentsList.forEach(comment => {
            // 处理评论内容
            let content = comment.content.replace(/\n/g, '<br>');

            // 如果有结构化的引用数据，显示引用块
            let quoteHtml = '';
            if (comment.quote && comment.quote.content) {
                const quoteType = comment.quote.type || 'post';
                const quoteAuthor = comment.quote.author ? `@${comment.quote.author}` : '文章内容';
                quoteHtml = `
                    <div class="border-l-4 border-blue-500 pl-3 py-2 mb-3 bg-blue-50 rounded">
                        <div class="text-xs text-gray-500 mb-1">${quoteAuthor}:</div>
                        <div class="text-sm text-gray-700">${comment.quote.content}</div>
                    </div>
                `;
            }

            commentsHtml += `
                <div class="mb-6 border-b border-gray-100 pb-6" data-comment-id="${comment.id}">
                    <div class="flex items-start">
                        <div class="flex-shrink-0 mr-3">
                            <div class="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
                                <span class="text-gray-600 font-medium">${comment.guest_name.charAt(0)}</span>
                            </div>
                        </div>
                        <div class="flex-1">
                            <div class="flex items-center">
                                <h4 class="text-sm font-medium text-gray-900">${comment.guest_name}</h4>
                                <span class="mx-2 text-gray-300">•</span>
                                <span class="text-xs text-gray-500">${formatDate(comment.created_at)}</span>
                            </div>
                            <div class="mt-2 text-gray-700">
                                ${quoteHtml}
                                ${content}
                            </div>
                            <div class="mt-2">
                                <button class="text-xs text-blue-600 hover:text-blue-800 reply-btn"
                                        data-comment-id="${comment.id}"
                                        data-comment-name="${comment.guest_name}">
                                    回复
                                </button>
                            </div>

                            <!-- 回复列表 -->
                            ${comment.replies && comment.replies.length > 0 ? `
                                <div class="mt-4 ml-6 space-y-4">
                                    ${comment.replies.map(reply => {
                                        // 处理回复内容
                                        let replyContent = reply.content.replace(/\n/g, '<br>');

                                        // 如果有结构化的引用数据，显示引用块
                                        let replyQuoteHtml = '';
                                        if (reply.quote && reply.quote.content) {
                                            const quoteAuthor = reply.quote.author ? `@${reply.quote.author}` : '文章内容';
                                            replyQuoteHtml = `
                                                <div class="border-l-4 border-blue-500 pl-2 py-1 mb-2 bg-blue-50 rounded">
                                                    <div class="text-xs text-gray-500 mb-1">${quoteAuthor}:</div>
                                                    <div class="text-xs text-gray-700">${reply.quote.content}</div>
                                                </div>
                                            `;
                                        }

                                        return `
                                            <div class="flex items-start" data-comment-id="${reply.id}">
                                                <div class="flex-shrink-0 mr-3">
                                                    <div class="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center">
                                                        <span class="text-gray-500 text-xs">${reply.guest_name.charAt(0)}</span>
                                                    </div>
                                                </div>
                                                <div class="flex-1">
                                                    <div class="flex items-center">
                                                        <h5 class="text-xs font-medium text-gray-900">${reply.guest_name}</h5>
                                                        <span class="mx-1 text-gray-300">•</span>
                                                        <span class="text-xs text-gray-500">${formatDate(reply.created_at)}</span>
                                                    </div>
                                                    <div class="mt-1 text-sm text-gray-700">
                                                        ${replyQuoteHtml}
                                                        ${replyContent}
                                                    </div>
                                                </div>
                                            </div>
                                        `;
                                    }).join('')}
                                </div>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;
        });

        container.innerHTML = commentsHtml;

        // 绑定回复按钮事件
        document.querySelectorAll('.reply-btn').forEach(button => {
            button.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                const commentName = this.getAttribute('data-comment-name');
                replyToComment(commentId, commentName);
            });
        });
    }

    // 回复评论
    function replyToComment(commentId, commentName) {
        document.getElementById('parent-id').value = commentId;
        document.getElementById('selected-text-content').textContent = `${commentName}: `;
        document.getElementById('selected-text-quote').classList.remove('hidden');
        document.getElementById('quoted-comment-id').value = commentId;

        // 滚动到评论表单
        document.getElementById('comment-form').scrollIntoView({ behavior: 'smooth' });
    }

    // 提交评论
    function submitComment(postId) {
        const form = document.getElementById('comment-form');
        const formData = new FormData(form);

        // 添加CSRF token（如果需要）
        // formData.append('_token', '{{ csrf_token() }}');

        fetch('/comment/submit/' + postId, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.code === 0) {
                // 重置表单
                form.reset();
                document.getElementById('selected-text-quote').classList.add('hidden');
                document.getElementById('parent-id').value = '0';
                document.getElementById('quoted-text').value = '';
                document.getElementById('quoted-comment-id').value = '0';

                // 重新加载评论
                loadComments(postId);
            } else {
                alert('评论提交失败: ' + data.msg);
            }
        })
        .catch(error => {
            console.error('Error submitting comment:', error);
            alert('评论提交失败，请稍后再试');
        });
    }

    // 格式化日期
    function formatDate(dateString) {
        console.log('[formatDate] 原始时间字符串:', dateString);
        
        // 处理带微秒的 ISO 8601 格式 (例如: 2025-10-16T04:02:30.000000Z)
        // 移除微秒部分，只保留到秒: 2025-10-16T04:02:30Z
        const normalizedDateString = dateString.replace(/(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})(\.\d+)?(Z?)/, '$1$3');
        console.log('[formatDate] 规范化后:', normalizedDateString);
        
        // 正确处理：保留Z，让JavaScript自动转换为UTC时间
        // 数据库存储的是UTC时间，new Date()会自动转换为本地时间
        const date = new Date(normalizedDateString);
        console.log('[formatDate] 解析的日期对象:', date);
        console.log('[formatDate] 日期时间戳:', date.getTime());
        
        const now = new Date();
        console.log('[formatDate] 当前时间:', now);
        console.log('[formatDate] 当前时间戳:', now.getTime());
        
        const diff = now - date;
        console.log('[formatDate] 时间差(毫秒):', diff);
        console.log('[formatDate] 时间差(分钟):', Math.floor(diff / 60000));
        console.log('[formatDate] 时间差(小时):', Math.floor(diff / 3600000));
        console.log('[formatDate] 时间差(天):', Math.floor(diff / 86400000));

        // 处理负数时间差（评论时间在未来）或无效日期
        if (isNaN(diff) || diff < 0) {
            console.warn('[formatDate] 时间差异常（负数或NaN），返回格式化日期');
            return date.getFullYear() + '年' + (date.getMonth() + 1) + '月' + date.getDate() + '日';
        }

        if (diff < 60000) { // 1分钟内
            console.log('[formatDate] 返回: 刚刚');
            return '刚刚';
        } else if (diff < 3600000) { // 1小时内
            const result = Math.floor(diff / 60000) + '分钟前';
            console.log('[formatDate] 返回:', result);
            return result;
        } else if (diff < 86400000) { // 1天内
            const result = Math.floor(diff / 3600000) + '小时前';
            console.log('[formatDate] 返回:', result);
            return result;
        } else {
            const result = date.getFullYear() + '年' + (date.getMonth() + 1) + '月' + date.getDate() + '日';
            console.log('[formatDate] 返回:', result);
            return result;
        }
    }

    // 初始化划词评论功能
    function initTextSelection() {
        const postContainer = document.getElementById('post-container');
        const tooltip = document.getElementById('selection-tooltip');
        const quoteBtn = document.getElementById('quote-selection-btn');

        // 检查核心元素是否存在
        if (!postContainer || !tooltip || !quoteBtn) {
            console.warn('[Post.content] 划词评论所需的核心元素不存在');
            return;
        }

        // 变量用于跟踪是否显示了提示框
        let tooltipVisible = false;
        let currentSelection = '';
        let tooltipShownAt = 0; // 记录提示框显示时间，用于防抖首次点击

        // 监听鼠标释放事件（使用选区矩形定位）
        postContainer.addEventListener('mouseup', function() {
            setTimeout(showTooltipForSelection, 0);
        });

        // 监听选区变化，动态更新或隐藏提示框
        document.addEventListener('selectionchange', function() {
            setTimeout(showTooltipForSelection, 0);
        });

        // 滚动或窗口尺寸变化时隐藏提示框，避免位置错乱
        window.addEventListener('scroll', function(){ tooltip.classList.add('hidden'); tooltipVisible = false; }, { passive: true });
        window.addEventListener('resize', function(){ tooltip.classList.add('hidden'); tooltipVisible = false; });

        function showTooltipForSelection() {
            const selection = window.getSelection();
            if (!selection || selection.rangeCount === 0 || selection.isCollapsed) {
                tooltip.classList.add('hidden');
                tooltipVisible = false;
                return;
            }
            const selectedText = selection.toString().trim();
            if (!selectedText || selectedText.length <= 1) {
                tooltip.classList.add('hidden');
                tooltipVisible = false;
                return;
            }
            let inContainer = false;
            try {
                const range = selection.getRangeAt(0);
                const anc = range.commonAncestorContainer;
                const node = (anc && anc.nodeType === 1) ? anc : (anc ? anc.parentNode : null);
                if (node && postContainer.contains(node)) inContainer = true;
                if (!inContainer) {
                    const an = selection.anchorNode;
                    const fn = selection.focusNode;
                    if ((an && postContainer.contains(an)) || (fn && postContainer.contains(fn))) inContainer = true;
                }
            } catch (_) {}
            if (!inContainer) {
                tooltip.classList.add('hidden');
                tooltipVisible = false;
                return;
            }
            currentSelection = selectedText;
            showTooltipFromSelection();
            tooltipVisible = true;
        }

        // 点击页面其他地方隐藏提示框
        document.addEventListener('mousedown', function(e) {
            // 只有当点击的不是提示框内的元素时才隐藏
            if (tooltip && !tooltip.contains(e.target)) {
                tooltip.classList.add('hidden');
                tooltipVisible = false;
            }
        });

        // 引用选中文本按钮点击事件
        quoteBtn.addEventListener('click', function(e) {
            e.stopPropagation(); // 阻止事件冒泡
            // 防止在显示后立即因残留点击而误触发
            if (Date.now() - tooltipShownAt < 300) {
                return;
            }
            console.log('[Post.content] 引用按钮被点击');

            if (currentSelection) {
                // 获取必需元素
                const selectedTextQuote = document.getElementById('selected-text-quote');
                const selectedTextContent = document.getElementById('selected-text-content');
                const quotedText = document.getElementById('quoted-text');
                const parentId = document.getElementById('parent-id');
                const commentForm = document.getElementById('comment-form');
                const textarea = document.getElementById('content');

                // 显示引用
                if (selectedTextContent && selectedTextQuote && quotedText) {
                    selectedTextContent.textContent = currentSelection;
                    selectedTextQuote.classList.remove('hidden');
                    quotedText.value = currentSelection;
                } else {
                    console.warn('[Post.content] 引用相关元素不存在，跳过引用设置');
                }

                // 清除之前的父评论ID
                if (parentId) {
                    parentId.value = '0';
                }

                // 设置quoted_comment_id为0表示引用文章内容而非评论
                const quotedCommentId = document.getElementById('quoted-comment-id');
                if (quotedCommentId) {
                    quotedCommentId.value = '0';
                }

                // 滚动到评论表单
                if (commentForm) {
                    commentForm.scrollIntoView({ behavior: 'smooth' });
                    // 聚焦到评论框
                    if (textarea) {
                        setTimeout(() => textarea.focus(), 500);
                    }
                }
            }

            // 隐藏提示框
            tooltip.classList.add('hidden');
            tooltipVisible = false;
        });
    }

    // 显示提示框
    function showTooltipFromSelection() {
        const tooltip = document.getElementById('selection-tooltip');
        if (!tooltip) return;
        const sel = window.getSelection();
        if (!sel || sel.rangeCount === 0) return;
        const range = sel.getRangeAt(0);
        const rect = range.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;

        // 先显示以便测量尺寸（不闪烁）
        tooltip.style.visibility = 'hidden';
        tooltip.classList.remove('hidden');
        const tooltipWidth = tooltip.offsetWidth || 120;
        const tooltipHeight = tooltip.offsetHeight || 30;

        // 计算基于 viewport 的位置（fixed 定位不需要 pageOffset）
        let finalX = (rect.left + rect.width / 2) - (tooltipWidth / 2);
        let finalY = rect.top - tooltipHeight - 8; // 优先显示在上方
        if (finalY < 8) {
            finalY = rect.bottom + 8; // 空间不足时显示在下方
        }
        // 视口内约束
        finalX = Math.max(8, Math.min(finalX, viewportWidth - tooltipWidth - 8));
        finalY = Math.max(8, Math.min(finalY, viewportHeight - tooltipHeight - 8));

        // 应用位置
        tooltip.style.position = 'fixed';
        tooltip.style.left = Math.round(finalX) + 'px';
        tooltip.style.top = Math.round(finalY) + 'px';
        tooltip.style.zIndex = '9999';
        tooltip.style.visibility = '';

        // 记录显示时间并短暂禁用点击，避免鼠标抬起后的残余 click 命中按钮
        tooltipShownAt = Date.now();
        tooltip.style.pointerEvents = 'none';
        setTimeout(() => { tooltip.style.pointerEvents = 'auto'; }, 250);
    }
</script>
</div>
</div>
