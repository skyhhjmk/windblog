{% extends 'base.html.twig' %}

{% block title %}{{ page_title|default('风屿雨博客') }}{% endblock %}

{% block content %}
    <div class="max-w-full mx-auto px-4">
        <!-- 页面标题区域 -->
        <div class="text-center mb-12 fade-in-on-scroll" data-animation-delay="0">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-4">{{ page_title|default('风屿雨博客') }}</h1>
            <p class="text-gray-600 text-lg md:text-xl">欢迎来到链接广场，这里汇聚了优质的网站资源</p>
            <div class="mt-4 flex items-center justify-center gap-3">
                <a href="/link/request" 
                   class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200">
                    <i class="fas fa-link mr-2"></i>
                    申请友链
                </a>
                <div class="inline-flex items-center text-sm">
                    <label for="linkSortSelect" class="mr-2 text-gray-600">排序</label>
                    <select id="linkSortSelect" class="px-2 py-1 border border-gray-300 rounded">
                        <option value="default">默认</option>
                        <option value="protocol">协议级别</option>
                        <option value="score">审核评分</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- 链接列表 -->
        {% if links|length > 0 %}
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {% for link in links %}
                    <div class="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 group"
                         data-protocol="{{ link.custom_fields.protocol ?? link.custom_fields.protocol_level ?? '' }}"
                         data-score="{{ (link.custom_fields.auto_audit.score ?? 0) }}">
                        <div class="p-6">
                            <div class="flex items-start mb-4">
                                <!-- 网站图标占位 -->
                                <div class="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16 flex items-center justify-center mr-4 transition-all duration-300 group-hover:bg-blue-100">
                                    <i class="fas fa-link text-gray-500 text-xl group-hover:text-blue-500"></i>
                                </div>
                                <div>
                                    <h2 class="text-xl font-bold text-gray-800 mb-1 group-hover:text-blue-600 transition-colors duration-200">
                                        <a href="{% if link.redirect_type == 'info' %}/link/info/{{ link.id }}{% else %}/link/goto/{{ link.id }}{% endif %}"
                                           {% if link.redirect_type == 'direct' %}target="{{ link.target }}"{% endif %}
                                           class="block">
                                            {{ link.name|length > 20 ? link.name|slice(0, 20) ~ '...' : link.name }}
                                        </a>
                                    </h2>
                                    <div class="flex items-center text-gray-500 text-xs gap-2 flex-wrap">
                                        <span class="inline-flex items-center">
                                            <i class="far fa-calendar-alt mr-1"></i>
                                            {{ link.created_at|date('Y-m-d') }}
                                        </span>
                                        {% set _protocol = link.custom_fields.protocol ?? link.custom_fields.protocol_level ?? '' %}
                                        {% set _peer_status = link.custom_fields.peer_status ?? (link.status ? 'established' : (link.is_pending ? 'pending' : '')) %}
                                        {% if _protocol %}
                                            <span class="px-2 py-0.5 rounded-full text-[10px] font-medium bg-purple-100 text-purple-700">协议 {{ _protocol }}</span>
                                        {% endif %}
                                        {% if _peer_status %}
                                            {% set _color = _peer_status == 'established' ? 'green' : (_peer_status == 'waiting' ? 'yellow' : 'gray') %}
                                            <span class="px-2 py-0.5 rounded-full text-[10px] font-medium bg-{{ _color }}-100 text-{{ _color }}-700">{{ _peer_status }}</span>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                            
                            <p class="text-gray-600 mb-4 text-sm leading-relaxed line-clamp-3">
                                {{ link.description ?: '这个网站还没有添加描述信息' }}
                            </p>
                            
                            <div class="flex justify-between items-center">
                                <a href="{% if link.redirect_type == 'info' %}/link/info/{{ link.id }}{% else %}/link/goto/{{ link.id }}{% endif %}"
                                   {% if link.redirect_type == 'direct' %}target="{{ link.target }}"{% endif %}
                                   class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium text-sm transition-colors duration-200">
                                    {% if link.redirect_type == 'info' %}
                                        查看详情
                                    {% else %}
                                        访问网站
                                    {% endif %}
                                    <svg class="w-4 h-4 ml-1 transition-transform duration-200 group-hover:translate-x-1" 
                                         fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                    </svg>
                                </a>
                                
                                <div class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                                    <i class="fas fa-external-link-alt mr-1"></i>
                                    {% if link.redirect_type == 'direct' %}
                                        直接跳转
                                    {% elseif link.redirect_type == 'goto' %}
                                        确认跳转
                                    {% elseif link.redirect_type == 'iframe' %}
                                        内嵌打开
                                    {% elseif link.redirect_type == 'info' %}
                                        详情页面
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>

            <!-- 分页 -->
            <div class="mt-12 flex justify-center">
                {{ pagination|raw }}
            </div>
        {% else %}
            <div class="bg-white rounded-2xl shadow-lg p-12 text-center fade-in-on-scroll" data-animation-delay="0.2">
                <div class="text-gray-400 mb-4">
                    <svg class="w-24 h-24 mx-auto opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                              d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1">
                        </path>
                    </svg>
                </div>
                <h3 class="text-2xl font-medium text-gray-700 mb-2">暂无链接</h3>
                <p class="text-gray-500 max-w-md mx-auto">目前还没有添加任何友情链接，敬请期待！</p>
            </div>
        {% endif %}
    </div>
    
    <style>
        
        /* 文本截断样式 */
        .line-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        /* 文本截断样式 */
        .line-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        /* 加载动画样式 */
        .fa-spinner {
            animation: fa-spin 1s linear infinite;
        }
    </style>

    <script>
        // 初始化链接列表功能
        function initLinkList() {
            // 为卡片添加鼠标悬浮效果
            const linkCards = document.querySelectorAll('.group');
            linkCards.forEach(card => {
                // 避免重复添加事件监听器
                const existingHandlers = getEventListeners(card).mouseenter || [];
                if (existingHandlers.length === 0) {
                    card.addEventListener('mouseenter', function() { this.style.zIndex = '10'; });
                    card.addEventListener('mouseleave', function() { this.style.zIndex = '1'; });
                }
            });

            // 排序功能
            const sortSelect = document.getElementById('linkSortSelect');
            if (sortSelect) {
                // 避免重复添加事件监听器
                const existingHandlers = getEventListeners(sortSelect).change || [];
                if (existingHandlers.length === 0) {
                    sortSelect.addEventListener('change', function() {
                        const mode = this.value;
                        const grid = document.querySelector('.grid');
                        if (!grid) return;
                        const items = Array.from(grid.children);
                        const protocolRank = { 'CAT5': 5, 'CAT4': 4, 'CAT3': 3, 'CAT2': 2, 'CAT1': 1 };

                        const getProtocolWeight = (el) => {
                            const p = (el.getAttribute('data-protocol') || '').toUpperCase();
                            // 兼容如 "CAT3E" 取前3位
                            const key = p.startsWith('CAT') ? p.slice(0, 4).replace(/[^A-Z0-9]/g, '').replace(/([A-Z0-9]{4}).*/, '$1').slice(0,4) : p;
                            return protocolRank[key] || 0;
                        };
                        const getScore = (el) => parseInt(el.getAttribute('data-score') || '0', 10) || 0;

                        let sorted = items.slice();
                        if (mode === 'protocol') {
                            sorted.sort((a, b) => getProtocolWeight(b) - getProtocolWeight(a));
                        } else if (mode === 'score') {
                            sorted.sort((a, b) => getScore(b) - getScore(a));
                        } else {
                            // 默认恢复到原始顺序（按出现顺序）
                            sorted = items;
                        }
                        // 重新附加到容器以改变顺序
                        sorted.forEach(el => grid.appendChild(el));
                    });
                }
                // 默认按协议级别排序一次
                sortSelect.value = 'protocol';
                // 使用setTimeout确保在DOM完全加载后触发排序
                setTimeout(() => {
                    sortSelect.dispatchEvent(new Event('change'));
                }, 100);
            }
        }
        
        // 页码跳转功能
        function jumpToPage(maxPage) {
            const input = document.getElementById('page-input');
            if (!input) return;
            
            const page = parseInt(input.value);

            if (isNaN(page) || page < 1 || page > maxPage) {
                alert('请输入有效的页码 (1-' + maxPage + ')');
                return;
            }

            // 优先使用PJAX跳转（如果可用）
            if (window.PJAX && window.PJAX.loadUrl) {
                window.PJAX.loadUrl('/page/' + page);
            } else {
                window.location.href = '/page/' + page;
            }
        }
        
        // 为了获取事件监听器数量，需要添加这个辅助函数
        function getEventListeners(element) {
            const listeners = {};
            const events = ['click', 'mouseenter', 'mouseleave', 'change'];
            events.forEach(event => {
                const listenersCount = element[`_${event}Listeners`]?.length || 0;
                listeners[event] = Array(listenersCount).fill({});
            });
            return listeners;
        }
        
        // 在DOM加载完成时初始化
        document.addEventListener('DOMContentLoaded', initLinkList);
        // 支持PJAX页面切换后重新初始化
        document.addEventListener('page:ready', initLinkList);
    </script>

{% endblock %}