<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes">
    <link rel="dns-prefetch" href="//cdn.tailwindcss.com">
    <link rel="preconnect" href="https://cdn.tailwindcss.com" crossorigin>
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com">
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
    <title>{% block title %}{{ page_title|default('风屿雨博客') }}{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    {# 本地资产预加载与指纹化（零编译） #}
    <link rel="preload" as="style" href="{{ asset('/assets/css/font-awesome.css') }}">
    <link rel="stylesheet" href="{{ asset('/assets/css/font-awesome.css') }}">
    <link rel="stylesheet" href="{{ asset('/assets/vditor/index.min.css') }}">
    <link rel="stylesheet" href="{{ asset('/assets/vditor/content-theme/ant-design.min.css') }}">
    <!-- 高级动画样式 -->
    <link rel="stylesheet" href="{{ asset('/assets/css/animations.css') }}">
    {# 可选：如需本地脚本，使用 defer 并指纹化（存在时再启用） #}
    {# <script src="{{ asset('/assets/js/common.js') }}" defer></script> #}
    <!-- 动画工具库 -->
    <script src="{{ asset('/assets/js/animation-utils.js') }}" defer></script>
    <script src="{{ asset('/assets/vditor/method.min.js') }}" defer></script>

    <script async src="https://cdnjs.cloudflare.com/ajax/libs/pangu/7.2.0/pangu.umd.js"
            integrity="sha512-er1ryC6I6mvQLB6cEcyDj9MYKdSXwuvdqFuir5fzcPlzqagv3Swng87sIPcib8Spm4BTIT5PNTmRaMSdM1QVxQ=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <style>
        .blog-container {
            max-width: 1200px;
        }

        /* 添加平滑过渡效果 */
        body {
            transition: all 0.3s ease;
        }

        /* 保留移动端导航菜单特有的动画 */
        @keyframes slide-in {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slide-out {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        .mobile-menu {
            animation: slide-in 0.3s ease-out forwards;
        }

        .mobile-menu.closing {
            animation: slide-out 0.3s ease-out forwards;
        }

        /* Markdown内容样式 */
        .prose {
            color: #374151;
            max-width: none;
        }

        .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
            color: #1f2937;
            font-weight: 600;
            margin-top: 1.5em;
            margin-bottom: 1em;
        }

        .prose p {
            margin-top: 1em;
            margin-bottom: 1em;
            line-height: 1.75;
        }

        .prose ul, .prose ol {
            margin-top: 1em;
            margin-bottom: 1em;
            padding-left: 1.5em;
        }

        .prose li {
            margin-bottom: 0.5em;
        }

        .prose a {
            color: #3b82f6;
            text-decoration: underline;
        }

        .prose a:hover {
            color: #1d4ed8;
        }

        .prose blockquote {
            border-left: 4px solid #d1d5db;
            padding-left: 1em;
            margin-left: 0;
            margin-right: 0;
            color: #6b7280;
        }

        .prose pre {
            background-color: #f3f4f6;
            padding: 1em;
            border-radius: 0.375rem;
            overflow-x: auto;
        }

        .prose code {
            background-color: #f3f4f6;
            padding: 0.2em 0.4em;
            border-radius: 0.25rem;
            font-size: 0.875em;
        }

        .prose pre code {
            background-color: transparent;
            padding: 0;
        }

        /* 增强移动端触摸反馈 */
        .tap-highlight {
            -webkit-tap-highlight-color: rgba(59, 130, 246, 0.2);
        }

        /* 移动端搜索结果样式优化 */
        @media (max-width: 640px) {
            #searchResults {
                max-height: 50vh;
                width: calc(100vw - 2rem);
                left: 1rem;
                right: 1rem;
            }
        }
    </style>
    {% block extra_css %}{% endblock %}
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
<!-- 顶部导航 -->
<header class="bg-white shadow-sm sticky top-0 z-10">
    <div class="container mx-auto px-4 py-4 flex justify-between items-center">
        <a href="/" class="text-2xl font-bold text-gray-800 flex items-center hover-animate tap-highlight">
            <i class="fas fa-blog text-blue-600 mr-2"></i>
            <span id="topbarTitle">{{ page_title|default('风屿雨博客') }}</span>
        </a>
        <!-- 搜索表单 -->
        <div class="relative hidden md:block mr-6">
            <form action="/search" method="get" class="search-form" id="searchForm">
                <div class="relative">
                    <input type="text" name="q" id="searchInput"
                           placeholder="搜点什么"
                           class="pl-10 pr-4 py-2 border border-gray-300 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64"
                           autocomplete="off">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400"></i>
                    </div>
                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none hidden"
                         id="searchLoading">
                        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                    </div>
                    <div id="searchResults"
                         class="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg hidden max-h-60 overflow-y-auto"></div>
                </div>
            </form>
        </div>
        <!-- 移动端搜索按钮 -->
        <button class="md:hidden text-gray-600 hover-animate tap-highlight mr-4" id="mobileSearchBtn">
            <i class="fas fa-search text-lg"></i>
        </button>
        <nav class="hidden md:block">
            <ul class="flex space-x-6">
                <li>
                    <a href="/"
                       class="text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center hover-animate tap-highlight">
                        <i class="fas fa-home mr-1"></i>
                        首页
                    </a>
                </li>
                {# <li>
                    <a href="#"
                       class="text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center hover-animate tap-highlight">
                        <i class="fas fa-tags mr-1"></i>
                        分类
                    </a>
                </li> #}
                <li>
                    <a href="/link"
                       class="text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center hover-animate tap-highlight">
                        <i class="fas fa-link mr-1"></i>
                        友情链接
                    </a>
                </li>
                {# <li>
                    <a href="/admin"
                       class="text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center hover-animate tap-highlight">
                        <i class="fas fa-cog mr-1"></i>
                        管理后台
                    </a>
                </li> #}
            </ul>
        </nav>

        <!-- 移动端菜单按钮 -->
        <button class="md:hidden text-gray-600 hover-animate tap-highlight" id="mobileMenuBtn">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
        </button>
    </div>

    <!-- 移动端搜索栏 -->
    <div class="md:hidden px-4 pb-4 hidden" id="mobileSearchBar">
        <form action="/search" method="get" class="search-form">
            <div class="relative">
                <input type="text" name="q"
                       placeholder="搜点什么"
                       class="pl-10 pr-4 py-2 border border-gray-300 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent w-full"
                       autocomplete="off">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
            </div>
        </form>
    </div>
</header>


<!-- 移动端导航菜单 -->
<div class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden" id="mobileMenuOverlay">
    <div class="absolute top-0 right-0 h-full w-64 bg-white shadow-lg p-4 mobile-menu" id="mobileMenu">
        <div class="flex justify-between items-center mb-6">
            <h3 class="text-lg font-bold text-gray-800">菜单</h3>
            <button class="text-gray-500 hover:text-gray-800" id="closeMobileMenuBtn">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <nav>
            <ul class="space-y-4">
                <li>
                    <a href="/"
                       class="block text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center py-2 tap-highlight">
                        <i class="fas fa-home mr-3 w-5 text-center"></i>
                        首页
                    </a>
                </li>
                {# <li>
                    <a href="#"
                       class="block text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center py-2 tap-highlight">
                        <i class="fas fa-tags mr-3 w-5 text-center"></i>
                        分类
                    </a>
                </li> #}
                <li>
                    <a href="/link"
                       class="block text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center py-2 tap-highlight">
                        <i class="fas fa-link mr-3 w-5 text-center"></i>
                        友情链接
                    </a>
                </li>
                {# <li>
                    <a href="/admin"
                       class="block text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200 flex items-center py-2 tap-highlight">
                        <i class="fas fa-cog mr-3 w-5 text-center"></i>
                        管理后台
                    </a>
                </li> #}
            </ul>
        </nav>
    </div>
</div>

<!-- 主要内容区 -->
<main class="flex-grow container mx-auto px-4 pt-20 md:pt-24 pb-6 md:pb-8 blog-container">
    <div class="flex flex-col md:flex-row gap-6 md:gap-8">
        <!-- 主内容区域 - 占3/4宽度 -->
        <div id="pjax-container" class="w-full md:w-3/4">
            {% block content %}{% endblock %}
        </div>
        <!-- 侧边栏 - 占1/4宽度，移动端隐藏 -->
        <div id="sidebar-container" class="hidden md:block w-full md:w-1/4">
            {% block sidebar %}
                {% if sidebar is defined and sidebar.widgets is defined %}
                    {% for widget in sidebar.widgets %}
                        {% if widget.enabled and widget.html is defined %}
                            {{ widget.html|raw }}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endblock %}
        </div>
    </div>
</main>

<!-- 页脚 -->
<footer class="bg-white border-t mt-8 md:mt-12 py-6 md:py-8 fade-in-on-scroll visible" data-animation-delay="0.4">
    <div class="container mx-auto px-4">
        <div class="flex flex-col md:flex-row justify-between items-center">
            <div class="mb-4 md:mb-0 text-center md:text-left">
                <p class="text-gray-600">
                    &copy; {{ 'now'|date('Y') }} {{ page_title|default('风屿雨博客') }} - 基于 Webman 框架构建
                </p>
            </div>
            <div class="flex space-x-4">
                <a href="#" class="text-gray-500 hover:text-blue-600 hover-animate tap-highlight">
                    <i class="fab fa-github fa-lg"></i>
                </a>
                <a href="#" class="text-gray-500 hover:text-blue-600 hover-animate tap-highlight">
                    <i class="fab fa-twitter fa-lg"></i>
                </a>
                <a href="#" class="text-gray-500 hover:text-blue-600 hover-animate tap-highlight">
                    <i class="fab fa-weibo fa-lg"></i>
                </a>
            </div>
        </div>
    </div>
</footer>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
        integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.pjax/2.0.1/jquery.pjax.min.js" crossorigin="anonymous"
        referrerpolicy="no-referrer"></script>
{% block extra_js %}{% endblock %}

<!-- PJAX 初始化 -->
<script>
    (function () {
        // 只检查jQuery是否存在，不再依赖jQuery的pjax插件
        if (!window.jQuery) return;
        jQuery(function ($) {
            // 全局配置变量
            const pjaxConfig = {
                transitionSpeed: 300,
                progressBar: null,
                container: null
            };

            // 动态加载响应中的外部资源（script[src] 与 link[rel=stylesheet]），避免PJAX丢失新依赖
            function loadExternalAssets(responseHtml, docObj, $respObj) {
                try {
                    const scripts = [];
                    const links = [];

                    if (docObj) {
                        docObj.querySelectorAll('script[src]').forEach(s => scripts.push(s.getAttribute('src')));
                        docObj.querySelectorAll('link[rel="stylesheet"][href]').forEach(l => links.push(l.getAttribute('href')));
                    }
                    if ($respObj && $respObj.length) {
                        $respObj.find('script[src]').each(function(){ scripts.push(this.getAttribute('src')); });
                        $respObj.find('link[rel="stylesheet"][href]').each(function(){ links.push(this.getAttribute('href')); });
                    }

                    const uniq = (arr) => Array.from(new Set(arr.filter(Boolean)));

                    const needCss = uniq(links).filter(href => {
                        const exists = Array.from(document.querySelectorAll('link[rel="stylesheet"][href]'))
                            .some(l => l.getAttribute('href') === href);
                        return !exists;
                    });

                    let needJs = uniq(scripts).filter(src => {
                        const exists = Array.from(document.querySelectorAll('script[src]'))
                            .some(s => s.getAttribute('src') === src || s.dataset.pjaxLoaded === '1');
                        return !exists;
                    });
                    // 排除全局已加载的脚本，避免重复与竞态（例如 vditor/method.min.js）
                    needJs = needJs.filter(src => !/\/assets\/vditor\/method\.min\.js(\?|$)/.test(src));

                    // 先加载CSS
                    needCss.forEach(href => {
                        try {
                            const link = document.createElement('link');
                            link.rel = 'stylesheet';
                            link.href = href;
                            link.dataset.pjaxLoaded = '1';
                            document.head.appendChild(link);
                        } catch (_) {}
                    });

                    // 顺序加载JS，保证依赖顺序
                    (function loadNext(i){
                        if (i >= needJs.length) return;
                        const src = needJs[i];
                        const s = document.createElement('script');
                        s.src = src;
                        s.async = false;
                        s.dataset.pjaxLoaded = '1';
                        s.onload = () => loadNext(i+1);
                        s.onerror = () => loadNext(i+1);
                        document.head.appendChild(s);
                    })(0);
                } catch (e) {
                    console.warn('PJAX: 资源加载解析失败', e);
                }
            }

            // 侧边栏切换动画（统一右滑出 → 统一右→左滑入），兼容PJAX，减少抖动
            function applySidebarDiff(sidebarEl, newHtml) {
                if (!sidebarEl) return;
                const temp = document.createElement('div');
                temp.innerHTML = newHtml || '';

                const oldChildren = Array.from(sidebarEl.children);
                const newChildren = Array.from(temp.children);

                // 锁定高度，避免布局抖动
                try {
                    const initialHeight = sidebarEl.offsetHeight;
                    if (initialHeight && isFinite(initialHeight)) {
                        sidebarEl.style.minHeight = initialHeight + 'px';
                    }
                } catch (_) {}

                const duration = 400;
                const ease = 'cubic-bezier(0.22, 1, 0.36, 1)';
                const stagger = 35;

                // 统一退场：旧侧栏元素右滑并淡出
                oldChildren.forEach((el, idx) => {
                    const delay = idx * stagger;
                    el.style.willChange = 'opacity, transform';
                    el.style.transition = `opacity ${duration}ms ${ease}, transform ${duration}ms ${ease}`;
                    setTimeout(() => {
                        el.style.opacity = '0';
                        el.style.transform = 'translateX(40px)';
                    }, delay);
                });

                // 旧元素动画总时长
                const outTotal = (oldChildren.length ? (oldChildren.length - 1) * stagger : 0) + duration + 20;

                setTimeout(() => {
                    // 清空并插入新的侧栏HTML
                    sidebarEl.innerHTML = '';
                    newChildren.forEach(n => sidebarEl.appendChild(n));

                    // 容器轻微缩放（移动端淡入保留）
                    try {
                        sidebarEl.style.transformOrigin = 'top right';
                        sidebarEl.style.transition = (window.innerWidth < 768)
                            ? 'transform 200ms ease-out, opacity 200ms ease-out'
                            : 'transform 200ms ease-out';
                        if (window.innerWidth < 768) {
                            sidebarEl.style.opacity = '0.95';
                        }
                        sidebarEl.style.transform = 'scale(0.98)';
                        setTimeout(() => {
                            sidebarEl.style.transform = 'scale(1)';
                            if (window.innerWidth < 768) {
                                sidebarEl.style.opacity = '1';
                            }
                        }, 0);
                    } catch (_) {}

                    // 统一入场：新侧栏元素从右向左滑入并淡入
                    newChildren.forEach((el, idx) => {
                        const delay = idx * stagger;
                        el.style.opacity = '0';
                        el.style.transform = 'translateX(40px)';
                        el.style.willChange = 'opacity, transform';
                        requestAnimationFrame(() => {
                            setTimeout(() => {
                                el.style.transition = `opacity ${duration}ms ${ease}, transform ${duration}ms ${ease}`;
                                el.style.opacity = '1';
                                el.style.transform = 'translateX(0)';
                            }, delay);
                        });
                    });

                    // 释放高度锁
                    const inTotal = (newChildren.length ? (newChildren.length - 1) * stagger : 0) + duration + 40;
                    setTimeout(() => {
                        sidebarEl.style.minHeight = '';
                    }, inTotal);
                }, outTotal);
            }

                // 初始化
                function initPJAX() {
                    console.log('PJAX: 开始初始化');
                    // 获取DOM元素
                    pjaxConfig.progressBar = document.getElementById('pjax-progress');
                    pjaxConfig.container = document.getElementById('pjax-container');
                    
                    console.log('PJAX: 进度条元素:', pjaxConfig.progressBar);
                    console.log('PJAX: 容器元素:', pjaxConfig.container);
                    
                    // 确保容器存在
                    if (!pjaxConfig.container) {
                        console.error('PJAX Container not found!');
                        return;
                    }
                    
                    console.log('PJAX: 初始化完成，开始绑定事件');
                    
                    // 捕获阶段原生拦截（优先级最高），确保同源链接走 PJAX
                    document.addEventListener('click', function (e) {
                        try {
                            const a = e.target && e.target.closest ? e.target.closest('a[href]') : null;
                            if (!a) return;
                            const href = a.getAttribute('href') || '';
                            // 允许快捷键行为
                            if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) return;
                            // 忽略锚点、显式禁用、在新窗口打开
                            if (href.startsWith('#') || a.hasAttribute('data-no-pjax') || a.target === '_blank') return;
                            const url = new URL(href, window.location.origin);
                            // 非同源或下载资源放行
                            if (url.origin !== window.location.origin) return;
                            if (url.pathname.match(/\.(pdf|doc|docx|xls|xlsx|zip)$/i)) return;
                            // 当前页不动作
                            if (url.href === window.location.href) {
                                e.preventDefault();
                                e.stopPropagation();
                                return;
                            }
                            // 统一走 PJAX
                            e.preventDefault();
                            e.stopPropagation();
                            navigateWithPJAX(url.href);
                        } catch (_) {
                            // 解析失败，放行
                        }
                    }, true);

                    // 设置进度条样式
                    if (pjaxConfig.progressBar) {
                        pjaxConfig.progressBar.style.position = 'fixed';
                        pjaxConfig.progressBar.style.top = '0';
                        pjaxConfig.progressBar.style.left = '0';
                        pjaxConfig.progressBar.style.width = '0';
                        pjaxConfig.progressBar.style.zIndex = '9999';
                        pjaxConfig.progressBar.style.pointerEvents = 'none';
                    }

                    // 绑定所有同源内部链接的点击事件（更鲁棒）
                    $(document).on('click', 'a[href]:not([target="_blank"]):not([data-no-pjax]):not([href^="#"])', function(e) {
                        try {
                            const href = this.getAttribute('href') || '';
                            // 允许快捷键打开新标签或其他行为
                            if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) return;

                            // 解析为绝对URL以判定同源
                            const url = new URL(href, window.location.origin);

                            // 非同源或下载等，放行
                            if (url.origin !== window.location.origin) return;
                            if (url.pathname.match(/\.(pdf|doc|docx|xls|xlsx|zip)$/i)) return;

                            // 当前页则不动作
                            if (url.href === window.location.href) {
                                e.preventDefault();
                                e.stopImmediatePropagation();
                                return;
                            }

                            // PJAX导航
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            navigateWithPJAX(url.href);
                        } catch (err) {
                            // 解析失败时放行
                        }
                    });

                    // 处理页码跳转功能
                    $(document).on('click', '#page-jump-btn', function(e) {
                        e.preventDefault();
                        const maxPage = parseInt($(this).data('max-page') || 1);
                        const input = document.getElementById('page-input');
                        const page = parseInt(input.value);

                        if (isNaN(page) || page < 1 || page > maxPage) {
                            alert('请输入有效的页码 (1-' + maxPage + ')');
                            return;
                        }

                        navigateWithPJAX('/page/' + page + '.html');
                    });

                    // 监听页码输入框的回车事件
                    $(document).on('keydown', '#page-input', function(e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            $(this).next('#page-jump-btn').click();
                        }
                    });

                    // 监听浏览器历史记录导航
                    $(window).on('popstate', function(e) {
                        if (e.originalEvent && e.originalEvent.state) {
                            loadContentWithPJAX(window.location.href, false);
                        }
                    });
                }

                // 执行PJAX导航
                function navigateWithPJAX(url) {
                    try {
                        document.dispatchEvent(new CustomEvent('pjax:start'));
                        document.dispatchEvent(new CustomEvent('pjax:send'));
                        if (window.$) {
                            $(document).trigger('pjax:start');
                            $(document).trigger('pjax:send');
                        }
                    } catch (e) {}
                    // 添加页面淡出效果
                    pjaxConfig.container.style.opacity = '0';
                    pjaxConfig.container.style.transition = `opacity ${pjaxConfig.transitionSpeed}ms ease-out`;

                    // 更新进度条
                    if (pjaxConfig.progressBar) {
                        pjaxConfig.progressBar.style.transition = 'none';
                        pjaxConfig.progressBar.style.width = '0';
                        // 触发重绘
                        void pjaxConfig.progressBar.offsetWidth;
                        pjaxConfig.progressBar.style.transition = 'width 0.3s ease';
                        pjaxConfig.progressBar.style.width = '10%';
                    }
                    document.body.classList.add('pjax-loading');

                    // 延迟加载内容，等待淡出动画完成
                    setTimeout(function() {
                        loadContentWithPJAX(url, true);
                    }, pjaxConfig.transitionSpeed);
                }

                // 使用PJAX加载内容
                function loadContentWithPJAX(url, pushState) {
                    console.log('使用PJAX加载:', url);
                    
                    // 统一构造带 _pjax=1 的请求地址，帮助服务端返回 content 模板
                    const fetchUrl = (function(u){
                        try {
                            return u + (u.indexOf('?') === -1 ? '?_pjax=1' : '&_pjax=1');
                        } catch (_) { return u; }
                    })(url);

                    // 更新进度条
                    if (pjaxConfig.progressBar) {
                        pjaxConfig.progressBar.style.width = '30%';
                    }

                    // 发送Ajax请求
                    $.ajax({
                        url: fetchUrl,
                        type: 'GET',
                        timeout: 10000,
                        headers: {
                            'X-PJAX': 'true',
                            'X-PJAX-Container': '#pjax-container',
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'text/html'
                        },
                        success: function(response) {
                            console.log('PJAX请求成功');
                            
                            // 更新进度条
                            if (pjaxConfig.progressBar) {
                                pjaxConfig.progressBar.style.width = '70%';
                            }

                            // 解析HTML获取内容（更鲁棒）
                            const $resp = $(response);
                            let newContent = '';
                            try {
                                const parser = new DOMParser();
                                const doc = parser.parseFromString(response, 'text/html');
                                const byId = doc.getElementById('pjax-container');
                                if (byId) {
                                    newContent = byId.innerHTML || '';
                                }
                            } catch (e) {}
                            if (!newContent) {
                                newContent = $resp.find('#pjax-container').html();
                            }
                            
                            if (newContent) {
                                try {
                                    document.dispatchEvent(new CustomEvent('pjax:beforeReplace', { detail: { url: url, contents: byId } }));
                                    if (window.$) {
                                        $(document).trigger('pjax:beforeReplace', [byId]);
                                    }
                                } catch (e) {}
                                // 更新内容
                                pjaxConfig.container.innerHTML = newContent;

                                // 进入新页面时滚动到顶部（立即滚动，避免首屏元素在平滑期间不可见）
                                try {
                                    // 立即滚动到顶部
                                    window.scrollTo(0, 0);
                                    document.documentElement.scrollTop = 0;
                                    document.body.scrollTop = 0;
                                } catch (_) {}

                                // 动画可见性修复：确保首屏区域标题等元素立即可见
                                try {
                                    const vh = window.innerHeight || document.documentElement.clientHeight || 800;
                                    const threshold = Math.floor(vh * 1.2);
                                    const elems = pjaxConfig.container.querySelectorAll('.fade-in-on-scroll, h1, h2');
                                    elems.forEach(function (el) {
                                        const r = el.getBoundingClientRect();
                                        if (!r) return;
                                        // 首屏区域内的元素立即设为可见
                                        if (r.top < threshold && r.bottom > 0) {
                                            el.classList.add('visible');
                                            el.style.opacity = '';
                                            el.style.transform = '';
                                        }
                                    });
                                    // 连续触发两次滚动事件，确保所有基于scroll的监听被唤醒
                                    try { window.dispatchEvent(new Event('scroll')); } catch (_) {}
                                    try { requestAnimationFrame(function(){ window.dispatchEvent(new Event('scroll')); }); } catch (_) {}
                                    // 重新初始化动画系统
                                    if (window.AnimationUtils && typeof AnimationUtils.reinit === 'function') {
                                        AnimationUtils.reinit();
                                    }
                                } catch (e) {}

                                // 处理片段容器内的外部脚本与样式（script[src]、link[rel=stylesheet]）
                                try {
                                    // 将片段中的样式移动到 head（避免重复）
                                    const fragLinks = Array.from(pjaxConfig.container.querySelectorAll('link[rel="stylesheet"][href]'));
                                    const existingLinks = Array.from(document.querySelectorAll('link[rel="stylesheet"][href]')).map(l => l.getAttribute('href'));
                                    fragLinks.forEach(function (l) {
                                        const href = l.getAttribute('href') || '';
                                        if (!href) return;
                                        if (existingLinks.includes(href)) {
                                            // 已存在则从片段移除，避免重复
                                            if (l.parentNode) l.parentNode.removeChild(l);
                                        } else {
                                            const link = document.createElement('link');
                                            link.rel = 'stylesheet';
                                            link.href = href;
                                            link.dataset.pjaxLoaded = '1';
                                            document.head.appendChild(link);
                                            if (l.parentNode) l.parentNode.removeChild(l);
                                        }
                                    });

                                    // 顺序加载片段中的外链脚本，确保依赖顺序
                                    const fragScripts = Array.from(pjaxConfig.container.querySelectorAll('script[src]'));
                                    const existingScripts = Array.from(document.querySelectorAll('script[src]')).map(s => s.getAttribute('src'));
                                    const queue = fragScripts
                                        .map(function (s) { return s.getAttribute('src') || ''; })
                                        .filter(function (src) { return !!src && !existingScripts.includes(src); });

                                    (function loadSeq(i) {
                                        if (i >= queue.length) return;
                                        const src = queue[i];
                                        const s = document.createElement('script');
                                        s.src = src;
                                        // 保留原 type（支持 module）
                                        const orig = fragScripts.find(x => (x.getAttribute('src') || '') === src);
                                        const type = orig && orig.getAttribute('type');
                                        if (type) s.type = type;
                                        s.async = false;
                                        s.dataset.pjaxLoaded = '1';
                                        s.onload = function () { loadSeq(i + 1); };
                                        s.onerror = function () { loadSeq(i + 1); };
                                        document.head.appendChild(s);
                                    })(0);
                                } catch (e) {
                                    console.warn('PJAX: 片段外部资源加载失败', e);
                                }

                                // 加载外部资源（脚本与样式），确保新页面依赖就绪
                                try {
                                    loadExternalAssets(response, doc, $resp);
                                } catch (e) {}

                                // 执行片段中的内联脚本（避免外部脚本重复加载）
                                try {
                                    const inlineScripts = pjaxConfig.container.querySelectorAll('script:not([src])');
                                    inlineScripts.forEach(function (oldScript) {
                                        // 可选控制：data-pjax-eval="false" 跳过
                                        const attr = oldScript.getAttribute('data-pjax-eval');
                                        const shouldEval = (attr == null) ? true : (attr !== 'false');
                                        if (!shouldEval) return;

                                        const newScript = document.createElement('script');
                                        if (oldScript.type) newScript.type = oldScript.type;
                                        newScript.textContent = oldScript.textContent || '';
                                        oldScript.parentNode.replaceChild(newScript, oldScript);
                                    });
                                } catch (e) {
                                    console.warn('PJAX: 执行内联脚本失败', e);
                                }

                                // 注入侧栏（若存在）
                                try {
                                    const sidebarHtml = $resp.find('#pjax-sidebar-html').html();
                                    if (sidebarHtml != null) {
                                        const sidebar = document.getElementById('sidebar-container');
                                        if (sidebar) {
                                            applySidebarDiff(sidebar, sidebarHtml);
                                            try { document.dispatchEvent(new Event('sidebar:updated')); } catch (_) {}
                                        }
                                    }
                                } catch (e) {}
                                
                                // 更新页面标题
                                const newTitle = $resp.filter('title').text();
                                if (newTitle) {
                                    document.title = newTitle;
                                    const topbar = document.getElementById('topbarTitle');
                                    if (topbar) {
                                        topbar.textContent = newTitle;
                                    }
                                }

                                // 添加到历史记录
                                if (pushState) {
                                    history.pushState({ path: url }, '', url);
                                }

                                // 内容加载完成后的处理
                                setTimeout(function() {
                                    // 显示内容
                                    pjaxConfig.container.style.opacity = '1';

                                    // 完成进度条
                                    if (pjaxConfig.progressBar) {
                                        pjaxConfig.progressBar.style.width = '100%';
                                        setTimeout(() => {
                                            pjaxConfig.progressBar.style.width = '0';
                                        }, 200);
                                    }

                                    // 移除加载状态
                                    document.body.classList.remove('pjax-loading');

                                    // 统一发送完成事件
                                    try {
                                        document.dispatchEvent(new CustomEvent('pjax:complete'));
                                        document.dispatchEvent(new CustomEvent('pjax:end'));
                                        if (window.$) {
                                            $(document).trigger('pjax:complete');
                                            $(document).trigger('pjax:end');
                                        }
                                    } catch (e) {}

                                    // 触发页面就绪事件
                                    document.dispatchEvent(new CustomEvent('page:ready'));

                                    // 重新初始化动画
                                    if (window.AnimationUtils) {
                                        AnimationUtils.reinit();
                                    }

                                    // 进度条收尾（到100并隐藏）
                                    if (window.PjaxProgress && typeof window.PjaxProgress.complete === 'function') {
                                        window.PjaxProgress.complete();
                                    }
                                }, 50);
                            } else {
                                console.error('PJAX: 未能找到内容容器，采用非刷新降级注入');
                                try {
                                    const bodyHtml = $resp.find('body').html();
                                    pjaxConfig.container.innerHTML = bodyHtml || String(response || '');
                                } catch (e) {
                                    pjaxConfig.container.innerHTML = String(response || '');
                                }
                                // 显示内容
                                pjaxConfig.container.style.opacity = '1';
                                // 完成进度条
                                if (pjaxConfig.progressBar) {
                                    pjaxConfig.progressBar.style.width = '100%';
                                    setTimeout(() => {
                                        pjaxConfig.progressBar.style.width = '0';
                                    }, 200);
                                }
                                // 移除加载状态
                                document.body.classList.remove('pjax-loading');
                                // 统一发送完成事件（不刷新）
                                try {
                                    document.dispatchEvent(new CustomEvent('pjax:complete'));
                                    document.dispatchEvent(new CustomEvent('pjax:end'));
                                    if (window.$) {
                                        $(document).trigger('pjax:complete');
                                        $(document).trigger('pjax:end');
                                    }
                                } catch (e) {}
                                // 触发页面就绪事件与动画重建
                                document.dispatchEvent(new CustomEvent('page:ready'));
                                if (window.AnimationUtils) {
                                    AnimationUtils.reinit();
                                }
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('PJAX请求失败:', status, error);
                            
                            // 重置进度条
                            if (pjaxConfig.progressBar) {
                                pjaxConfig.progressBar.style.width = '0';
                            }
                            
                            // 重置容器样式
                            pjaxConfig.container.style.opacity = '1';
                            document.body.classList.remove('pjax-loading');

                            // 统一错误事件
                            try {
                                document.dispatchEvent(new CustomEvent('pjax:error', { detail: { xhr: xhr, status: status, error: error } }));
                                if (window.$) {
                                    $(document).trigger('pjax:error', [xhr]);
                                }
                            } catch (e) {}

                            // 显示错误通知
                            if (window.AnimationUtils) {
                                if (xhr.status === 0) {
                                    AnimationUtils.showNotification('网络连接错误，请检查网络设置', 'error');
                                } else if (xhr.status >= 500) {
                                    AnimationUtils.showNotification('服务器错误，请稍后再试', 'error');
                                } else {
                                    AnimationUtils.showNotification('加载页面失败', 'error');
                                }
                            }
                        }
                    });
                }

                // 回退到普通页面加载
                function fallbackToNormalLoad(url) {
                    console.log('回退到普通页面加载:', url);
                    window.location.href = url;
                }

                // 添加键盘导航支持
                $(document).on('keydown', function(e) {
                    // Alt+左箭头或后退键返回上一页
                    if ((e.altKey && e.key === 'ArrowLeft') || e.key === 'Backspace') {
                        e.preventDefault();
                        window.history.back();
                    }
                    // Alt+右箭头前进到下一页
                    else if (e.altKey && e.key === 'ArrowRight') {
                        e.preventDefault();
                        window.history.forward();
                    }
                });

                // 向外暴露统一的 PJAX API
                window.PJAX = {
                    loadUrl: function (url) { navigateWithPJAX(url); },
                    back: function () { window.history.back(); }
                };
                // 初始化PJAX
                initPJAX();
        });
    })();
</script>

<script>
    // 移动端菜单功能
    (function () {
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        const closeMobileMenuBtn = document.getElementById('closeMobileMenuBtn');
        const mobileMenuOverlay = document.getElementById('mobileMenuOverlay');
        const mobileMenu = document.getElementById('mobileMenu');

        if (mobileMenuBtn && closeMobileMenuBtn && mobileMenuOverlay && mobileMenu) {
            mobileMenuBtn.addEventListener('click', function () {
                mobileMenuOverlay.classList.remove('hidden');
                mobileMenu.classList.remove('closing');
            });

            function closeMenu() {
                mobileMenu.classList.add('closing');
                setTimeout(() => {
                    mobileMenuOverlay.classList.add('hidden');
                }, 300);
            }

            closeMobileMenuBtn.addEventListener('click', closeMenu);
            mobileMenuOverlay.addEventListener('click', function (e) {
                if (e.target === mobileMenuOverlay) {
                    closeMenu();
                }
            });

            // 点击菜单项后关闭菜单
            const mobileMenuLinks = mobileMenu.querySelectorAll('a');
            mobileMenuLinks.forEach(link => {
                link.addEventListener('click', closeMenu);
            });
        }
    })();

    // 移动端搜索栏切换
    (function () {
        const mobileSearchBtn = document.getElementById('mobileSearchBtn');
        const mobileSearchBar = document.getElementById('mobileSearchBar');

        if (mobileSearchBtn && mobileSearchBar) {
            mobileSearchBtn.addEventListener('click', function () {
                mobileSearchBar.classList.toggle('hidden');
                if (!mobileSearchBar.classList.contains('hidden')) {
                    setTimeout(() => {
                        const searchInput = mobileSearchBar.querySelector('input');
                        if (searchInput) {
                            searchInput.focus();
                        }
                    }, 100);
                }
            });
        }
    })();

    document.addEventListener('DOMContentLoaded', function () {
        // 搜索功能
        let searchTimeout;
        let currentController = null;
        const searchInput = document.getElementById('searchInput');
        const searchResults = document.getElementById('searchResults');
        const searchForm = document.getElementById('searchForm');
        // 防止重复触发（Enter 与 submit 同时触发导致的双请求）
        let searchNavigating = false;

        if (!searchInput || !searchResults || !searchForm) return;

        // AJAX 内联筛选当前类型
        let inlineType = (function () {
            try {
                const allowed = ['all', 'post', 'tag', 'category'];
                const params = new URLSearchParams(window.location.search);
                const t = (params.get('type') || 'all').toLowerCase();
                return allowed.includes(t) ? t : 'all';
            } catch (e) {
                return 'all';
            }
        })();

        // 实时搜索功能
        searchInput.addEventListener('input', function () {
            const keyword = this.value.trim();

            clearTimeout(searchTimeout);

            // 立即显示加载动画（仅当长度≥3）
            if (keyword.length >= 3) {
                document.getElementById('searchLoading').classList.remove('hidden');
            } else {
                document.getElementById('searchLoading').classList.add('hidden');
            }

            if (keyword.length < 3) {
                searchResults.innerHTML = '<div class="p-4 text-center text-gray-500">请输入至少 3 个字符以开始搜索</div>';
                searchResults.style.display = 'block';
                document.getElementById('searchLoading').classList.add('hidden');
                return;
            }

            searchTimeout = setTimeout(function () {
                if (currentController) {
                    try {
                        currentController.abort();
                    } catch (e) {
                    }
                }
                currentController = new AbortController();
                fetch('/search/ajax?q=' + encodeURIComponent(keyword) + '&type=' + encodeURIComponent(inlineType), {signal: currentController.signal})
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('searchLoading').classList.add('hidden');
                        if (data.success) {
                            currentController = null;
                            displaySearchResults(data.results, data.total, data.tips || []);
                            // 保存搜索历史
                            saveSearchHistory(keyword);
                        } else {
                            searchResults.style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error('Search error:', error);
                        currentController = null;
                        document.getElementById('searchLoading').classList.add('hidden');
                        searchResults.style.display = 'none';
                    });
            }, 300);
        });

        // 保存搜索历史
        function saveSearchHistory(keyword) {
            let history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
            // 去重并限制数量
            history = history.filter(item => item !== keyword);
            history.unshift(keyword);
            history = history.slice(0, 10);
            localStorage.setItem('searchHistory', JSON.stringify(history));
        }

        // 显示搜索历史
        function showSearchHistory() {
            const history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
            if (history.length === 0) {
                searchResults.innerHTML = '<div class="p-4 text-center text-gray-500">暂无搜索历史</div>';
            } else {
                let html = '<div class="p-2 border-b border-gray-100 text-sm text-gray-600">最近搜索</div>';
                history.forEach(item => {
                    html += `
                    <div class="p-3 hover:bg-gray-50 border-b border-gray-100 last:border-b-0 cursor-pointer flex justify-between items-center" onclick="this.querySelector('a').click()">
                        <a href="/search?q=${encodeURIComponent(item)}" class="flex-1 text-gray-800">
                            <i class="fas fa-history text-gray-400 mr-2"></i>
                            ${item}
                        </a>
                        <button class="text-gray-400 hover:text-red-500 ml-2" onclick="event.stopPropagation(); removeSearchHistory('${item.replace(/'/g, "\\'")}')">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                });
                html += '<div class="p-2 border-t border-gray-100 text-center"><button class="text-xs text-gray-500 hover:text-gray-700" onclick="clearSearchHistory()">清空历史</button></div>';
                searchResults.innerHTML = html;
            }
            searchResults.style.display = 'block';
        }

        // 删除单条搜索历史
        function removeSearchHistory(keyword) {
            let history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
            history = history.filter(item => item !== keyword);
            localStorage.setItem('searchHistory', JSON.stringify(history));
            showSearchHistory();
        }

        // 清空搜索历史
        function clearSearchHistory() {
            localStorage.removeItem('searchHistory');
            showSearchHistory();
        }

        // 全局暴露函数以便HTML调用
        window.removeSearchHistory = removeSearchHistory;
        window.clearSearchHistory = clearSearchHistory;

        // 显示搜索结果
        function displaySearchResults(results, total, tips) {
            if (results.length === 0) {
                // 空结果也渲染筛选条
                let header = `
                    <div class="p-2 border-b border-gray-100 text-sm text-gray-600 flex items-center justify-between">
                        <span>找到 0 条结果</span>
                        <div class="inline-flex gap-1">
                            ${['all', 'post', 'tag', 'category'].map(function (k) {
                    var lbl = {'all': '全部', 'post': '文章', 'tag': '标签', 'category': '分类'}[k];
                    var active = (inlineType === k);
                    return '<button type="button" data-type="' + k + '" class="px-2 py-0.5 rounded-full border text-xs ' + (active ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-gray-700 border-gray-300 hover:bg-blue-50 hover:text-blue-700') + '">' + lbl + '</button>';
                }).join('')}
                        </div>
                    </div>`;
                searchResults.innerHTML = header + '<div class="p-4 text-center text-gray-500">没有找到相关文章</div>';
                // 绑定筛选按钮事件
                var btns0 = searchResults.querySelectorAll('button[data-type]');
                btns0.forEach(function (btn) {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        var t = this.getAttribute('data-type') || 'all';
                        if (t === inlineType) return;
                        inlineType = t;
                        window.scrollTo({top: 0, behavior: 'smooth'});
                        const keyword = (searchInput.value || '').trim();
                        if (keyword.length < 3) return;
                        document.getElementById('searchLoading').classList.remove('hidden');
                        fetch('/search/ajax?q=' + encodeURIComponent(keyword) + '&type=' + encodeURIComponent(inlineType))
                            .then(resp => resp.json())
                            .then(data => {
                                document.getElementById('searchLoading').classList.add('hidden');
                                if (data && data.success) {
                                    displaySearchResults(data.results, data.total, data.tips || []);
                                }
                            })
                            .catch(() => {
                                document.getElementById('searchLoading').classList.add('hidden');
                            });
                    });
                });
                searchResults.style.display = 'block';
                return;
            }

            var safeTotal = (typeof total === 'number' && isFinite(total)) ? total : (Array.isArray(results) ? results.length : 0);
            let html = `
                <div class="p-2 border-b border-gray-100 text-sm text-gray-600 flex items-center justify-between">
                    <span>找到 ${safeTotal} 条结果</span>
                    <div class="inline-flex gap-1">
                        ${['all', 'post', 'tag', 'category'].map(function (k) {
                var lbl = {'all': '全部', 'post': '文章', 'tag': '标签', 'category': '分类'}[k];
                var active = (inlineType === k);
                return '<button type="button" data-type="' + k + '" class="px-2 py-0.5 rounded-full border text-xs ' + (active ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-gray-700 border-gray-300 hover:bg-blue-50 hover:text-blue-700') + '">' + lbl + '</button>';
            }).join('')}
                    </div>
                </div>`;
            if (Array.isArray(tips) && tips.length > 0) {
                html += '<div class="p-2 text-xs text-blue-600 border-b border-gray-100">提示：' + tips.join('、') + '</div>';
            }
            results.forEach(function (result) {
                var r = result || {};
                var t = String(r.type || '').toLowerCase();
                var typeLabel = (t === 'post') ? '文章' : (t === 'tag' ? '标签' : (t === 'category' ? '分类' : '文章'));
                var rawTitle = (r.highlight_title != null) ? r.highlight_title : r.title;
                var title = String(rawTitle == null ? '' : rawTitle).trim();
                if (title === 'undefined' || title === 'null') title = '';
                var url = (typeof r.url === 'string' && r.url.trim() && r.url !== 'undefined' && r.url !== 'null') ? r.url : '#';

                var catTagsHtml = '';
                if (t === 'post') {
                    var cats = Array.isArray(r.categories) ? r.categories : [];
                    var tags = Array.isArray(r.tags) ? r.tags : [];

                    var catsHtml = '';
                    var tagsHtml = '';

                    if (cats.length > 0) {
                        catsHtml = cats.map(function (c) {
                            if (!c || !c.slug) return '';
                            return '<a href="/category/' + (c.slug || '') + '.html" class="badge-cat"><i class="fas fa-folder-open mr-1"></i>' + (c.name || '') + '</a>';
                        }).join('');
                    } else {
                        catsHtml = '<span class="px-2 py-0.5 text-[11px] rounded-full bg-gray-50 text-gray-500 border border-gray-100"><i class="fas fa-folder-open mr-1"></i>无分类</span>';
                    }

                    if (tags.length > 0) {
                        tagsHtml = tags.map(function (tg) {
                            if (!tg || !tg.slug) return '';
                            return '<a href="/tag/' + (tg.slug || '') + '.html" class="badge-tag"><i class="fas fa-hashtag mr-1"></i>' + (tg.name || '') + '</a>';
                        }).join('');
                    } else {
                        tagsHtml = '<span class="px-2 py-0.5 text-[11px] rounded-full bg-gray-50 text-gray-500 border border-gray-100"><i class="fas fa-hashtag mr-1"></i>无标签</span>';
                    }

                    catTagsHtml = '<div class="mt-1 flex flex-wrap gap-1">' + catsHtml + tagsHtml + '</div>';
                }

                var catsText = '';
                var tagsText = '';
                if (t === 'post') {
                    var cats = Array.isArray(r.categories) ? r.categories : [];
                    var tags = Array.isArray(r.tags) ? r.tags : [];

                    catsText = cats.map(function (c) {
                        return (c && c.name != null) ? String(c.name) : '';
                    }).filter(Boolean).join('、') || '无分类';

                    tagsText = tags.map(function (g) {
                        return (g && g.name != null) ? String(g.name) : '';
                    }).filter(Boolean).join('、') || '无标签';

                } else if (t === 'tag') {
                    catsText = '—';
                    tagsText = (r.title != null && r.title !== '') ? String(r.title) : '标签';
                } else if (t === 'category') {
                    catsText = (r.title != null && r.title !== '') ? String(r.title) : '分类';
                    tagsText = '—';
                } else {
                    catsText = '—';
                    tagsText = '—';
                }

                var textLine = catsText + ' · ' + tagsText;

                html += `
                <a href="${url}" class="block p-3 hover:bg-gray-50 border-b border-gray-100 last:border-b-0">
                    <div class="font-medium text-gray-800">${title}</div>
                    <div class="text-sm mt-1"><span class="badge-type">${typeLabel}</span></div>
                    <div class="text-xs text-gray-400 mt-2">${textLine}</div>
                </a>
            `;
            });

            if (safeTotal > results.length) {
                html += `<div class="p-3 text-center bg-gray-50">
                <a href="/search?q=${encodeURIComponent(searchInput.value)}" class="text-blue-600 hover:text-blue-800 text-sm">
                    查看全部 ${safeTotal} 条结果 →
                </a>
            </div>`;
            }

            searchResults.innerHTML = html;
            // 绑定筛选按钮事件
            var btns = searchResults.querySelectorAll('button[data-type]');
            btns.forEach(function (btn) {
                btn.addEventListener('click', function (e) {
                    e.preventDefault();
                    var t = this.getAttribute('data-type') || 'all';
                    if (t === inlineType) return;
                    inlineType = t;
                    window.scrollTo({top: 0, behavior: 'smooth'});
                    const keyword = (searchInput.value || '').trim();
                    if (keyword.length < 3) return;
                    document.getElementById('searchLoading').classList.remove('hidden');
                    fetch('/search/ajax?q=' + encodeURIComponent(keyword) + '&type=' + encodeURIComponent(inlineType))
                        .then(resp => resp.json())
                        .then(data => {
                            document.getElementById('searchLoading').classList.add('hidden');
                            if (data && data.success) {
                                displaySearchResults(data.results, data.total, data.tips || []);
                            }
                        })
                        .catch(() => {
                            document.getElementById('searchLoading').classList.add('hidden');
                        });
                });
            });
            searchResults.style.display = 'block';
        }

        // 点击其他地方隐藏搜索结果
        document.addEventListener('click', function (e) {
            if (!searchForm.contains(e.target)) {
                searchResults.style.display = 'none';
            }
        });

        // 聚焦时显示搜索历史
        searchInput.addEventListener('focus', function () {
            if (this.value.trim() === '') {
                showSearchHistory();
            }
        });

        // 键盘导航
        searchInput.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                searchResults.style.display = 'none';
                searchInput.blur();
            } else if (e.key === 'Enter') {
                e.preventDefault();
                if (searchNavigating) return;
                const keyword = searchInput.value.trim();
                if (keyword.length > 0) {
                    searchNavigating = true;
                    if (window.PJAX && window.PJAX.loadUrl) {
                        window.PJAX.loadUrl('/search?q=' + encodeURIComponent(keyword));
                    } else if (window.jQuery && jQuery.fn.pjax) {
                        $.pjax({
                            url: '/search?q=' + encodeURIComponent(keyword),
                            container: '#pjax-container',
                            fragment: '#pjax-container',
                            timeout: 8000,
                            scrollTo: 0
                        });
                    } else {
                        window.location.href = '/search?q=' + encodeURIComponent(keyword);
                    }
                }
            }
        });

        // 防止表单提交时页面跳转
        searchForm.addEventListener('submit', function (e) {
            if (searchNavigating) {
                e.preventDefault();
                return;
            }
            const keyword = searchInput.value.trim();
            if (keyword.length > 0) {
                searchNavigating = true;
                if (window.PJAX && window.PJAX.loadUrl) {
                    window.PJAX.loadUrl('/search?q=' + encodeURIComponent(keyword));
                } else if (window.jQuery && jQuery.fn.pjax) {
                    $.pjax({
                        url: '/search?q=' + encodeURIComponent(keyword),
                        container: '#pjax-container',
                        fragment: '#pjax-container',
                        timeout: 8000,
                        scrollTo: 0
                    });
                } else {
                    window.location.href = '/search?q=' + encodeURIComponent(keyword);
                }
            }
            e.preventDefault();
        });

        // 在 PJAX 完成后重置搜索导航标记，并同步内联筛选类型
        document.addEventListener('page:ready', function () {
            searchNavigating = false;
            try {
                const allowed = ['all', 'post', 'tag', 'category'];
                const params = new URLSearchParams(window.location.search);
                const t = (params.get('type') || 'all').toLowerCase();
                if (allowed.includes(t)) inlineType = t;
            } catch (e) {
            }
        });
        // 适配触摸设备的交互优化
        if ('ontouchstart' in document.documentElement) {
            // 为触摸设备优化悬停效果
            document.querySelectorAll('.hover-animate').forEach(element => {
                element.addEventListener('touchstart', function () {
                    this.style.transform = 'translateY(-2px)';
                }, {passive: true});

                element.addEventListener('touchend', function () {
                    this.style.transform = 'translateY(0)';
                }, {passive: true});
            });
        }
    });
</script>

<script>
    // Service Worker 注册（仅 HTTPS 或本地环境）
    (function () {
        if ('serviceWorker' in navigator && (location.protocol === 'https:' || location.hostname === 'localhost' || location.hostname === '127.0.0.1')) {
            window.addEventListener('load', function () {
                navigator.serviceWorker.register('/sw.js').then(function (reg) {
                    // 可选：新版本就绪时尝试立即启用
                    if (reg.waiting) {
                        reg.waiting.postMessage({type: 'SKIP_WAITING'});
                    }
                    reg.addEventListener('updatefound', function () {
                        const nw = reg.installing;
                        if (nw) {
                            nw.addEventListener('statechange', function () {
                                if (nw.state === 'installed' && navigator.serviceWorker.controller) {
                                    // 新SW已安装，提示或自动刷新策略可在此扩展
                                    // 这里保持静默以最小侵入
                                }
                            });
                        }
                    });
                }).catch(function (err) {
                    console.warn('SW register failed:', err);
                });
            });
        }
    })();
</script>
<script src="{{ asset('/assets/js/offline-notice.js') }}"></script>
<!-- 顶部 PJAX 进度条 -->
<div id="pjax-progress"
     style="position:fixed;top:0;left:0;height:2px;width:0;z-index:9999;background:#3b82f6;transition:width 200ms ease,opacity 200ms ease;opacity:0;"></div>
<script>
    (function () {
        var bar = null;

        function ensureBar() {
            if (!bar) bar = document.getElementById('pjax-progress');
            return bar;
        }

        function setWidth(p) {
            var el = ensureBar();
            if (!el) return;
            var pct = Math.max(0, Math.min(100, p));
            el.style.width = pct + '%';
        }

        function show() {
            var el = ensureBar();
            if (!el) return;
            el.style.opacity = '1';
        }

        function hide() {
            var el = ensureBar();
            if (!el) return;
            el.style.opacity = '0';
            // 重置为0以便下次起始
            setTimeout(function () {
                setWidth(0);
            }, 200);
        }

        function to70() {
            show();
            setWidth(70);
        }

        function to100AndHide() {
            setWidth(100);
            setTimeout(hide, 250);
        }

        window.PjaxProgress = {
            start: function () {
                show();
                setWidth(10);
            },      // 导航开始时点亮并到10%
            to70: to70,                                      // 导航完成后推进到70%
            complete: to100AndHide,                          // 页面内关键内容加载完成后到100并隐藏
            set: setWidth, show: show, hide: hide
        };

        // 绑定 jQuery-pjax 事件：开始与完成
        if (window.$) {
            $(document).on('pjax:send', function () {
                window.PjaxProgress.start();
            });
            $(document).on('pjax:complete', function () {
                window.PjaxProgress.to70();
            });
        }
    })();
</script>
</body>
</html>