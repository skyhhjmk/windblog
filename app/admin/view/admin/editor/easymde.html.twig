{% extends 'admin/base.html.twig' %}

{% block title %}EasyMDE 编辑器{% endblock %}

{% block content %}
    <link rel="stylesheet" href="/assets/css/all.min.css">
    <script src="/assets/js/highlight.min.js"></script>
    <link rel="stylesheet" href="/assets/css/github-dark.min.css">
    <link rel="stylesheet" href="/assets/css/easymde.min.css">
    <script src="/assets/js/easymde.min.js"></script>
<div class="max-w-6xl mx-auto px-4 py-8 h-full">
    <!-- 编辑器容器 -->
    <div class="bg-white rounded-lg shadow-lg p-6">
        <!-- 标题 -->
        <h1 class="text-2xl font-bold text-gray-800 mb-6">EasyMDE Markdown 编辑器</h1>
        
        <!-- 操作按钮 -->
        <div class="flex flex-wrap gap-4 mb-6">
            <button id="preview-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
                预览
            </button>
            <button id="save-btn" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50">
                保存
            </button>
            <button id="clear-btn" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50">
                清除缓存
            </button>
        </div>
        
        <!-- 编辑器区域 -->
        <textarea id="editor">{{ content }}</textarea>
    </div>
</div>

<script>
    // 初始化 EasyMDE
    var easyMDE = new EasyMDE({
        autoDownloadFontAwesome: false,
        element: document.getElementById('editor'),
        indentWithTabs: false,
        autosave: {
            enabled: true,
            uniqueId: "{{ post_id }}",
            delay: 1000,
        },
        previewRender: function (plainText) {
            return this.parent.markdown(plainText);
        },
        shortcuts: {
            drawTable: "Cmd-Alt-T",
            togglePreview: "Cmd-Alt-P",
            toggleSideBySide: "Cmd-Alt-S",
            toggleFullScreen: "Cmd-Alt-F"
        },
        lineNumbers: true, // 显示行号
        spellChecker: false, // 禁用拼写检查，false是禁用
        // 图片上传配置
        uploadImage: true,
        imageUploadEndpoint: "/admin/editor/upload-image",
        imageUploadMethod: "POST",
        imageUploadParam: "image",
        imageMaxSize: 50 * 1024 * 1024, // 50MB
        errorMessages: {
            noFileGiven: "未选择文件",
            noFileName: "文件名为空",
            noFileSelected: "未选择文件",
            imageUploadError: "图片上传失败",
            fileTooLarge: "文件过大，请上传小于50MB的文件",
            typeNotAllowed: "只允许上传图片文件 (JPEG, PNG, GIF, WebP)"
        },
        renderingConfig: {
            codeSyntaxHighlighting: true,
        },
        toolbar: [
            'bold', 'italic', 'strikethrough', 'heading', '|',
            'quote', 'unordered-list', 'ordered-list', '|',
            'link', 'image', 'table', 'horizontal-rule', '|',
            'preview', 'side-by-side', 'fullscreen', '|',
            'guide'
        ],
        // 自定义图片上传处理函数
        imageUploadFunction: function(file, onSuccess, onError) {
            var data = new FormData();
            data.append("image", file);
            
            fetch("/admin/editor/upload-image", {
                method: "POST",
                body: data
            })
            .then(response => response.json())
            .then(data => {
                if (data.success === 1) {
                    onSuccess(data.file.url);
                } else {
                    onError(data.message);
                }
            })
            .catch(error => {
                onError("网络错误: " + error);
            });
        }
    });

    // 预览按钮事件
    document.getElementById('preview-btn').addEventListener('click', function () {
        easyMDE.togglePreview();
    });

    // 保存按钮事件
    document.getElementById('save-btn').addEventListener('click', function () {
        // 发送到服务器保存
        fetch('/admin/editor/save', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                post_id: {{ post_id }},
                content: easyMDE.value()
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.code === 200) {
                alert('保存成功');
                easyMDE.clearAutosavedValue();
            } else {
                alert('保存失败: ' + data.msg);
            }
        })
        .catch(error => {
            alert('保存失败: ' + error.message);
        });
    });

    // 清除缓存按钮事件
    document.getElementById('clear-btn').addEventListener('click', function () {
        if (confirm('确定要清除自动保存的内容吗？')) {
            easyMDE.clearAutosavedValue();
            alert('已清除自动保存的内容');
        }
    });
</script>
{% endblock %}

{% block scripts %}

{% endblock %}