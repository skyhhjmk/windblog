version: '3.8'

services:
  # 应用服务
  app:
    image: ghcr.io/skyhhjmk/windblog:latest
    container_name: windblog_app
    user: "1000:1000"  # 非 root 用户
    ports:
      - "8787:8787"
    volumes:
      - ./data/windblog/runtime:/app/runtime
      - ./data/windblog/uploads:/app/public/uploads
    environment:
      - DB_PGSQL_HOST=postgres
      - DB_PGSQL_PORT=${POSTGRES_PORT}
      - DB_PGSQL_DATABASE=${POSTGRES_DB}
      - DB_PGSQL_USERNAME=${POSTGRES_USER}
      - DB_PGSQL_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - CACHE_DRIVER=redis
      - APP_DEBUG=${APP_DEBUG}
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=${ES_PORT}
      - LOGSTASH_HOST=${LOGSTASH_HOST}
      - LOGSTASH_PORT=${LOGSTASH_TCP_PORT}
      - ENABLE_LOGSTASH=${ENABLE_LOGSTASH}
      - IN_CONTAINER=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
    networks:
      - windblog_network
    command: php start.php start
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8787" ]
      interval: 10s
      timeout: 10s
      retries: 120
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE

  # PostgreSQL 数据库
  postgres:
    image: postgres:18-alpine
    container_name: windblog_postgres
    user: "70:70"  # postgres 用户
    ports:
      - "0.0.0.0:${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./pg_init.sql:/docker-entrypoint-initdb.d/pg_init.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 120
    networks:
      - windblog_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Redis 缓存
  redis:
    image: redis:8-alpine
    container_name: windblog_redis
    user: "999:999"  # redis 用户
    ports:
      - "0.0.0.0:${REDIS_PORT}:6379"
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 120
    networks:
      - windblog_network
    command: redis-server --appendonly yes
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: windblog_rabbitmq
    user: "999:999"  # rabbitmq 用户
    ports:
      - "0.0.0.0:${RABBITMQ_PORT}:5672"   # AMQP 端口
      - "0.0.0.0:${RABBITMQ_MANAGEMENT_PORT}:15672" # 管理界面
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 120
    networks:
      - windblog_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # ELK Setup - 初始化 Elasticsearch 用户密码
  elk-setup:
    image: curlimages/curl:latest
    container_name: windblog_elk_setup
    user: "1000:1000"  # 非 root 用户
    volumes:
      - ./elk/setup-elk.sh:/setup-elk.sh:ro
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
    depends_on:
      elasticsearch:
        condition: service_started
    networks:
      - windblog_network
    command: [
      "/bin/sh",
      "-c",
      "
      cat /setup-elk.sh | tr -d '\\r' > /tmp/setup-elk.sh &&
      chmod +x /tmp/setup-elk.sh &&
      sleep 10 &&
      /tmp/setup-elk.sh
      "
    ]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Elasticsearch 搜索引擎
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: windblog_elasticsearch
    user: "1000:1000"  # elasticsearch 用户
    ports:
      - "0.0.0.0:${ES_PORT}:9200"
      - "0.0.0.0:9300:9300"
    environment:
      - node.name=elasticsearch
      - cluster.name=windblog-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS}"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - windblog_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Logstash 日志处理
  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    container_name: windblog_logstash
    user: "1000:1000"  # logstash 用户
    ports:
      - "0.0.0.0:${LOGSTASH_PORT}:5044"     # Beats 端口
      - "${LOGSTASH_TCP_PORT}:5000" # TCP 端口（用于应用直接发送日志）
      - "0.0.0.0:9600:9600"                 # 监控端口
    environment:
      - xpack.monitoring.enabled=true
      - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200
      - xpack.monitoring.elasticsearch.username=logstash_system
      - xpack.monitoring.elasticsearch.password=${LOGSTASH_PASSWORD}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
    volumes:
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./data/logstash:/usr/share/logstash/data
    depends_on:
      elk-setup:
        condition: service_completed_successfully
    networks:
      - windblog_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9600/_node/stats || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 120
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Kibana 可视化界面
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: windblog_kibana
    user: "1000:1000"  # kibana 用户
    ports:
      - "0.0.0.0:${KIBANA_PORT}:5601"
    environment:
      - SERVERNAME=windblog-kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - KIBANA_ENCRYPTION_KEY=${KIBANA_ENCRYPTION_KEY}
      - xpack.security.encryptionKey=${KIBANA_ENCRYPTION_KEY}
      - xpack.reporting.encryptionKey=${KIBANA_ENCRYPTION_KEY}
      - xpack.encryptedSavedObjects.encryptionKey=${KIBANA_ENCRYPTION_KEY}
    volumes:
      - ./elk/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./data/kibana:/usr/share/kibana/data
    depends_on:
      elk-setup:
        condition: service_completed_successfully
    networks:
      - windblog_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 120
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Kibana 自动配置 - 创建索引模式和 ILM 策略
  kibana-setup:
    image: curlimages/curl:latest
    container_name: windblog_kibana_setup
    user: "1000:1000"  # 非 root 用户
    volumes:
      - ./elk/setup-kibana.sh:/setup-kibana.sh:ro
    environment:
      - KIBANA_URL=http://kibana:5601
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - windblog_network
    command: sh /setup-kibana.sh
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

networks:
  windblog_network:
    driver: bridge
